#!/bin/sh
# parece sacanagem mais aqui dentro tem um espa√ßo que deve ser usado caso queira colocar vers√£o " " o texto todo "vers√£o: "
# icones üî¥ üü† üü° üü¢ üîµ üü£ üü§ ‚ö´ ‚ö™ ‚úÖ ‚ùå 
# Vers√£o do Entrypoint
entrypoint_vurl="https://raw.githubusercontent.com/drylian/Eggs/main/Connect/Nginx/Versao_Atual"
entrypoint_version=$(curl -s "$entrypoint_vurl" | grep "Entrypoint: " | awk '{print $2}')
# Aguarde at√© que o cont√™iner seja totalmente inicializado
sleep 1
#Verifica a Arquitetura do Docker
Arquitetura=$([ "$(uname -m)" == "x86_64" ] && echo "amd64" || echo "arm64")
# Verifica se a conex√£o vai ser local ou externa
if [ "${MODE_CONEXAO}" == "1" ]; then
Online_Mode=""
Online_Mode2="" 
Online_Mode3=""
Online_Mode4=""
else
Online_Mode="deny all;"
Online_Mode2="allow 127.0.0.1;"
Online_Mode3="allow 192.168.0.0/24;"
Online_Mode4="allow 172.17.0.0/16;"
fi
# URL para a vers√£o mais recente
latest_version_url="https://raw.githubusercontent.com/drylian/Eggs/main/Connect/Nginx/Versao_Atual"

# Extrai a vers√£o atual do Pasta local version.sh
current_version=$(grep "Instala√ß√£o: " ./Status/Versao_Atual | awk '{print $2}')

# Extrai a vers√£o mais recente da URL
latest_version=$(curl -s "$latest_version_url" | grep "Instala√ß√£o: " | awk '{print $2}')

# Cores do Sistema
bold=$(echo -en "\e[1m")
lightgreen=$(echo -en "\e[92m")
vermelho=$(echo -en "\e[31m")
# ${bold}${vermelho}

if [ -z ${SUPORTE_ATIVO} ] || [ "${SUPORTE_ATIVO}" == "1" ]; then
  echo "${bold}${lightgreen}=============================================================================="
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}==>                     - - - Script  Entrypoint - - -                     <=="
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}=============================================================================="
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}==>                  - - - Informa√ß√µes da Maquina. - - -                   <=="
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Vefirica Arquitetura da Maquina
  if [ "${Arquitetura}" == "arm64" ]; then 
      echo "${bold}${lightgreen}==> üîµ Arquitetura :Alpine Arm64x                                           <=="
    else
      echo "${bold}${lightgreen}==> üîµ Arquitetura :Alpine AMD64x                                           <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}==> ‚úÖ Vers√£o do Entrypoint: $entrypoint_version                                            <=="
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Verifica Vers√£o da Instala√ß√£o
  if [ -z "$current_version" ]; then
  echo "${bold}${lightgreen}==> ‚ö´ Vers√£o da instala√ß√£o: Pre-instala√ß√£o, n√£o disponivel ou customizada. <=="
  else
  echo "${bold}${lightgreen}==> ‚úÖ Vers√£o da Instala√ß√£o Atual: $current_version                                      <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Verifica Se Atualiza√ß√£o Automatica est√° ativada
  if [ "${AUTO_UPDATE}" == "1" ]; then
  echo "${bold}${lightgreen}==> ‚úÖ Sistema de Atualiza√ß√£o Automatica est√° ativado.                      <=="
  else
  echo "${bold}${lightgreen}==> ‚ùå Sistema de Atualiza√ß√£o Automatica est√° ${bold}${vermelho}desativado${bold}${lightgreen}.                   <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Verifica Se Repara√ß√£o Automatica est√° ativada
  if [ "${REPARAR_SISTEMA}" == "1" ]; then
  echo "${bold}${lightgreen}==> ‚úÖ Sistema de Repara√ß√£o Automatica est√° ativada.                        <=="
  else
  echo "${bold}${lightgreen}==> ‚ùå Sistema de Repara√ß√£o Automatica est√° ${bold}${vermelho}desativado${bold}${lightgreen}.                     <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Verifica Se HTML esta local ou na nuvem
  if [ "${HTML_LOCAL}" == "1" ]; then
  echo "${bold}${lightgreen}==> ‚úÖ Sistema de HTML est√° na nuvem(Padr√£o).                               <=="
  else
  echo "${bold}${lightgreen}==> ‚ùå Sistema de HTML est√° no local (N√£o Recomendado). ${bold}${vermelho}desativado${bold}${lightgreen}.         <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Verifica Se O MODE_CONEXAO √© local ou √© externo
  if [ "${MODE_CONEXAO}" == "1" ]; then
  echo "${bold}${lightgreen}==> üü° Conex√£o Externa Ativada(Permite qualquer um Ver e baixar no Site).   <=="
  else
  echo "${bold}${lightgreen}==> üü¢ Conex√£o Interna Ativada(Apenas a maquina pode baixar e ver o site).  <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Verifica Se O MODE_CONEXAO √© local ou √© externo
  if [ "${DEFAULT_CONF}" == "1" ]; then
  echo "${bold}${lightgreen}==> ‚úÖ Default.conf Automatica est√° ativada.                                <=="
  else
  echo "${bold}${lightgreen}==> ‚ùå Default.conf Automatica est√° ${bold}${vermelho}desativada${bold}${lightgreen}.                             <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}=============================================================================="
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}==>                           Verifica√ß√£o do Egg                           <=="
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Verifica se o Suporte_Ativo existe no egg
  if [ -z "$SUPORTE_ATIVO" ]; then
  echo "${bold}${lightgreen}==> ‚ùå Variante do Suporte(ativar/desativar) do egg n√£o est√° definida.      <=="
  else
  echo "${bold}${lightgreen}==> ‚úÖ Variante do Suporte(ativar/desativar) do egg est√° definida.          <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  # Verifica se o AUTO_UPDATE existe no egg
  if [ -z "$AUTO_UPDATE" ]; then
  echo "${bold}${lightgreen}==> ‚ùå Variante do Atualiza√ß√£o(ativar/desativar) do egg n√£o est√° definida.  <=="
  else
  echo "${bold}${lightgreen}==> ‚úÖ Variante do Atualiza√ß√£o(ativar/desativar) do egg est√° definida.      <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
   # Verifica se o REPARAR_SISTEMA existe no egg
  if [ -z "${REPARAR_SISTEMA}" ]; then
  echo "${bold}${lightgreen}==> ‚ùå Variante do Repara√ß√£o(ativar/desativar) do egg n√£o est√° definida.    <=="
  else
  echo "${bold}${lightgreen}==> ‚úÖ Variante do Repara√ß√£o(ativar/desativar) do egg est√° definida.        <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
   # Verifica se o HTML_LOCAL existe no egg
  if [ -z "${HTML_LOCAL}" ]; then
  echo "${bold}${lightgreen}==> ‚ùå Variante do HTML(ativar/desativar) do egg n√£o est√° definida.         <=="
  else
  echo "${bold}${lightgreen}==> ‚úÖ Variante do HTML(ativar/desativar) do egg est√° definida.             <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
   # Verifica se o MODE_CONEXAO existe no egg
  if [ -z "${MODE_CONEXAO}" ]; then
  echo "${bold}${lightgreen}==> ‚ùå Variante da Conex√£o(ativar/desativar) do egg n√£o est√° definida.      <=="
  else
  echo "${bold}${lightgreen}==> ‚úÖ Variante da Conex√£o(ativar/desativar) do egg est√° definida.          <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
   # Verifica se o MODE_CONEXAO existe no egg
  if [ -z "${DEFAULT_CONF}" ]; then
  echo "${bold}${lightgreen}==> ‚ùå Variante da Default.conf(ativar/desativar) do egg n√£o est√° definida. <=="
  else
  echo "${bold}${lightgreen}==> ‚úÖ Variante da Default.conf(ativar/desativar) do egg est√° definida.     <=="
  fi
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}=============================================================================="
  # Avisa caso exista variantes n√£o definidas
  if [ -z "$AUTO_UPDATE" ] || [ -z "$SUPORTE_ATIVO" ] || [ -z "${REPARAR_SISTEMA}" ] || [ -z "${HTML_LOCAL}" ] || [ -z "${MODE_CONEXAO}" ] || [ -z "${DEFAULT_CONF}" ]; then
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}==>   ${bold}${vermelho}Uma ou mais Variantes est√£o indefinidas neste egg, recomendado que${bold}${lightgreen}   <=="
  echo "${bold}${lightgreen}==>             ${bold}${vermelho}o atualize para vers√£o mais recente do github.${bold}${lightgreen}             <=="
  echo "${bold}${lightgreen}==>            ${bold}${vermelho} https://github.com/drylian/Eggs/tree/main/Eggs ${bold}${lightgreen}            <=="
  echo "${bold}${lightgreen}==>                                                                        <=="
  echo "${bold}${lightgreen}=============================================================================="
  echo " "
  fi
  # Sistema de Erro------------------------------------------------
    if [[ -f "./Status/Formatar_Sistema" ]]; then
    echo "${bold}${lightgreen}==> üî¥ Detectado Erro no Entrypoint."
    echo "${bold}${lightgreen}==> üî¥ Iniciando Script de Limpeza."
    rm -rf ./nginx
    rm -rf ./Status
    rm -rf ./Explorer
    rm -rf ./tmp
    rm -rf ./Cache
    rm -rf ./logs
    rm ./index.html
    echo "${bold}${lightgreen}==> üî¥ Terminado, Iniciando Scripts padr√µes."
    else
    echo " "
    fi
  # Fim Sistema de Erro--------------------------------------------

  # Atualiza√ß√µes---------------------------------------------------
    echo "${bold}${lightgreen}==> üü¢ Iniciando Script."

    if [ "${AUTO_UPDATE}" == "1" ]; then
    echo "${bold}${lightgreen}==> üü† Iniciando Verifica√ß√£o de Atualiza√ß√µes."
      if [ -z "$current_version" ] || [ "$current_version" != "$latest_version" ]; then
      echo "${bold}${lightgreen}==> üü† Buscando Atualiza√ß√µes."
      echo "${bold}${lightgreen}==> üü† Nova vers√£o encontrada: $latest_version, preparando para atualiza√ß√£o."
      rm -rf ./nginx
      rm -rf ./Status
      rm -rf ./Explorer
      rm -rf ./tmp
      rm -rf ./Cache
      rm -rf ./logs
      rm ./index.html
      echo "${bold}${lightgreen}==> üü† iniciando script de instala√ß√£o da nova vers√£o:$latest_version."
      else
      echo "${bold}${lightgreen}==> üü¢ Verifica√ß√£o de Atualiza√ß√µes Detectou que a Sua vers√£o √© a mais atual."
      fi
    else
    echo "${bold}${lightgreen}==> üî¥ Verifica√ß√£o de Atualiza√ß√µes Desativado, Pulando etapa."
    fi
  # Fim Atualiza√ß√µes-----------------------------------------------
   
  # Sistema do Nginx-----------------------------------------------
   if [[ -f "./Status/Nginx_instalador" ]]; then
      echo "${bold}${lightgreen}==> üü¢ Nginx foi detectado, pulando Download."
   else
      echo "${bold}${lightgreen}==> üî¥ Verificador do Nginx ${bold}${vermelho}n√£o foi detectado ${bold}${lightgreen}, Iniciando download."
      mkdir ./Cache
      git clone -q https://github.com/finnie2006/ptero-nginx ./Cache
      mkdir ./nginx
      cp -r ./Cache/nginx/* ./nginx
      rm -rf ./Cache
      mkdir ./Status
      curl -s https://raw.githubusercontent.com/drylian/Eggs/main/Connect/Nginx/Leiame.txt  -o ./Status/Leia-me.txt
      touch ./Status/Nginx_instalador
    fi
  # Fim do Nginx---------------------------------------------------

  # Sistema do Nginx Explorador------------------------------------
   if [[ -f "./Status/Explorer_instalador" ]]; then
      echo "${bold}${lightgreen}==> üü¢ Nginx Explorer foi detectado, pulando Download."
   else
      echo "${bold}${lightgreen}==> üî¥ Verificador do Nginx Explorer ${bold}${vermelho}n√£o foi detectado ${bold}${lightgreen}, Iniciando download."
      mkdir ./Explorer
      
      git clone -q https://github.com/drylian/nginx-explorer ./Explorer
      touch ./Status/Explorer_instalador
    fi
  # Fim do Nginx Explorador----------------------------------------

  # Sistema das Logs-----------------------------------------------
   if [[ -f "./Status/Pasta_instalador" ]]; then
      echo "${bold}${lightgreen}==> üü¢ Verificador da Logs foi detectado, Executando procedimento padr√£o da pasta Logs."
      mkdir ./Cache
      mv ./logs/* ./Cache
      rm -r ./logs
      mkdir ./logs >/dev/null
      mv ./Cache/* ./logs
      rm -r ./Cache
   else
      echo "${bold}${lightgreen}==> üî¥ Verificador da Pasta Logs ${bold}${vermelho}n√£o foi detectado ${bold}${lightgreen}, Criando."
      mkdir ./logs >/dev/null
      touch ./Status/Pasta_instalador
    fi
  # Fim das Logs---------------------------------------------------

# Sistema do default.conf----------------------------------------
if [[ -f "./Status/Default.conf_instalado" ]]; then
echo "${bold}${lightgreen}==> üü¢ Default.conf ja carregado, executando Padr√µes no Break."
if [ -z "${DEFAULT_CONF}" ] || [ "${DEFAULT_CONF}" == "1" ]; then
rm ./nginx/conf.d/default.conf
cat > ./nginx/conf.d/default.conf << EOL
server {
    listen ${SERVER_PORT};
    server_name "";

    root   /home/container/;
    index  index.html index.htm;

    location / {
        ${Online_Mode} # Verifica se a conex√£o vai ser local ou externa
        ${Online_Mode2} # Verifica se a conex√£o vai ser local ou externa
        ${Online_Mode3} # Verifica se a conex√£o vai ser local ou externa
        ${Online_Mode4} # Verifica se a conex√£o vai ser local ou externa


    location /Arquivos/ {
        alias /home/container/Arquivos/;
        index  ___i;        # realmente n√£o precisamos de √≠ndice aqui, apenas listando Pastas
        autoindex on;
        autoindex_format json;
        disable_symlinks off;

    location /Arquivos/Publica {
        allow all;

      }
    }
  }
}

EOL
  else
  echo "${bold}${lightgreen}==> üü† Default.conf Personalizado, pulando no break."
  fi
    else
      echo "${bold}${lightgreen}==> üî¥ Verificador do Default.conf ${bold}${vermelho}n√£o foi detectado ${bold}${lightgreen}, Iniciando download."
      mkdir ./Arquivos
      mkdir ./Arquivos/Publica
      rm ./nginx/conf.d/default.conf
cat > ./nginx/conf.d/default.conf << EOL
server {
    listen ${SERVER_PORT};
    server_name ""; # ${Online_Mode} antiga variante

    root   /home/container/;
    index  index.html index.htm;

    location / {
        ${Online_Mode} # Verifica se a conex√£o vai ser local ou externa
        ${Online_Mode2} # Verifica se a conex√£o vai ser local ou externa
        ${Online_Mode3} # Verifica se a conex√£o vai ser local ou externa
        ${Online_Mode4} # Verifica se a conex√£o vai ser local ou externa

    location /Arquivos/ {
        alias /home/container/Arquivos/;
        index  ___i;        # realmente n√£o precisamos de √≠ndice aqui, apenas listando Pastas.
        autoindex on;
        autoindex_format json;
        disable_symlinks off; 

    location /Arquivos/Publica {
        allow all;

      }
    }
  }
}
EOL
      echo "${bold}${lightgreen}==> üü† Criando Introdu√ß√£o."
      curl -s https://raw.githubusercontent.com/drylian/Eggs/main/Connect/Nginx/introducao.md -o ./Arquivos/introducao.md
      touch ./Status/Default.conf_instalado
    fi
# Fim do default.conf--------------------------------------------

  # Setando Vers√£o-------------------------------------------------
    if [[ -f "./Status/Versao_Atual" ]]; then
      echo "${bold}${lightgreen}==> üü¢ Vers√£o Atual:$current_version."
    else
      echo "${bold}${lightgreen}==> üü¢ Setando Vers√£o Recente:$latest_version."
      curl -s https://raw.githubusercontent.com/drylian/Eggs/main/Connect/Nginx/Versao_Atual -o ./Status/Versao_Atual
    fi
  # Fim Setando Vers√£o--------------------------------------------

  echo "${bold}${lightgreen}==> üü¢ Verifica√ß√£o Completa."

  # Iniciando HTML------------------------------------------------
    if [ "${HTML_LOCAL}" == "1" ]; then
    echo "${bold}${lightgreen}==> üü¢ Iniciando HTML"
    if [[ -f "./index.html" ]]; then
    echo "${bold}${lightgreen}==> üü¢ Iniciando HTML Na Nuvem"
      rm ./index.html
      curl -s https://raw.githubusercontent.com/drylian/Eggs/main/Connect/Nginx/index.html -o ./index.html
    else
      curl -s https://raw.githubusercontent.com/drylian/Eggs/main/Connect/Nginx/index.html -o ./index.html
    fi
    else
    if [[ -f "./index.html" ]]; then
      echo "${bold}${lightgreen}==> üü† Iniciando HTML Local"
    else
      echo "${bold}${lightgreen}==> üü† HTML Local n√£o detectado, baixando."
      curl -s https://raw.githubusercontent.com/drylian/Eggs/main/Connect/Nginx/index.html -o ./index.html
    fi
    fi
  # Fim HTML------------------------------------------------------

  # Permiss√µes-----------------------------------------------------
    echo "${bold}${lightgreen}==> üü¢ Setando permiss√µes padr√µes."
    chmod 777 ./*
  # Fim Permiss√µes-------------------------------------------------

  # Limpar Tmp-----------------------------------------------------
    echo "${bold}${lightgreen}==> üü¢ Removendo Pastas Temporarios "
    rm -rf /home/container/tmp/*
  # Fim Limpar Tmp-------------------------------------------------

  # Dialogo--------------------------------------------------------
    echo "${bold}${lightgreen}==> üü¢ Iniciado Nginx "
    echo "${bold}${lightgreen}==> üü¢ Inicializado com sucesso"
    echo "${bold}${lightgreen}==> üü¢ Finalizando iniciador online"
    echo " "
    echo "${bold}${lightgreen}=============================================================================="
    echo "${bold}${lightgreen}==> üü¢ Final do Entrypoint: $entrypoint_version                                             <=="
    echo "${bold}${lightgreen}=============================================================================="
    echo " "
    echo " "
    echo " "
    echo " "
    echo " "
  # Fim Dialogo----------------------------------------------------



















#!/bin/sh
#        ====================================================
#                 Nginx Entrypoint Egg Criado por Drylian
#        ====================================================
# Icones üî¥ üü† üü° üü¢ üîµ üü£ üü§ ‚ö´ ‚ö™ ‚úÖ ‚ùå üìç ‚úÇÔ∏è üóëÔ∏è üüß üü® ‚¨ú 
# Icones ‚òëÔ∏è ‚úñÔ∏è ‚ùé üíæ üìì üìó üìò üìô üìù üìñ üìö üì∞ üóûÔ∏è üè∑Ô∏è üü• üü© üü¶ ‚öôÔ∏è 
# Icones üìí üìî üìï üìë üìÇ üìÅ üóÇÔ∏è üóÉÔ∏è üóÑÔ∏è üìä üìà üìâ üìá üìå üü™ üü´ ‚¨õ    
#

# Comandos Do painel M√∫daveis
StartType="0" # Define que tipo de comando vai ser executado 0=Direto 1=Nohub.
Script_Type="2" # Define se este Script √© Beta ou Alpha. 1=Alpha 2=Beta.
StartAMD="/usr/sbin/nginx -c /home/container/nginx/nginx.conf -p /home/container/" # Comando Start para amd.
StartARM="/usr/sbin/nginx -c /home/container/nginx/nginx.conf -p /home/container/" # Comando Start para arm.
Stop_CMD="Parar Servidor" # Comando para parar o Servidor.
Permissoes_padroes="chmod 777 ./*" # Define as permiss√µes do Pastas, por padr√£o recomendo chmod 777 ./*.
Egg="Nginx               " # O Nome do egg que ser√° executado, lembrando que o numero de caracteres maximos dentro "" √© 20 oque n√£o tiver de nome, use em espa√ßos.
Pasta_Base="üìÇInforma√ß√µes" # O Nome da pasta onde vai ser armazenada todas as informa√ß√µes do Script.
Base_txt="üü¢Informa√ß√µes.txt" # Nome do Pasta Onde vai Ficar os Verificadores do egg.
script_log="üìîScript.log.txt" # Nome da Log que o Script vai Rodar.
debug_log="üìîDebug.log.txt" # Nome da Log que vai rodar o Debug.
Base_Url="https://github.com/drylian/Eggs" #Link do github onde pode achar o egg.
version_file="./${Pasta_Base}/${Base_txt}" # Local onde a vers√£o vai ser Armazenada.
version_remote="https://raw.githubusercontent.com/drylian/Eggs/main/Connect/NGINX/Vers%C3%A3o.txt" #Local onde a Vers√£o Latest vai ser vista
# Cores do Terminal
C0=$(echo -en "\u001b[0m") # Padr√£o
C1=$(echo -en "\e[1m\u001b[36m") # Cor Ciano Com negrito.
C2=$(echo -en "\e[1m\u001b[32m") # Cor Verde Com Negrito.
C3=$(echo -en "\e[1m\u001b[31m") # Cor Vermelho Com Negrito.
C4=$(echo -en "\e[1m\u001b[34m") # Cor Azul Com Negrito.
C5=$(echo -en "\e[1m\u001b[35m") # Cor Margeta Com Negrito.
B0="\e[1m" # Negrito
# Dependencias do Script
# Cria√ß√£o da Pasta de Vefirica√ß√£o
if [[ ! -f "./${Pasta_Base}/${Base_txt}" ]]; then mkdir -p ./${Pasta_Base}; echo -e "üü¢Informa√ß√µes Do Script\n#\nüü¢Criado por Drylian\nüü¢Github: https://github.com/drylian/Eggs\nüü¢Vers√£o Atual: PR√â" > ./${Pasta_Base}/${Base_txt}; fi # Cria a pasta e o primeiro Pasta de vers√£o.
if [[ ! -d "${Pasta_Base}/Logs" ]]; then mkdir -p ./${Pasta_Base}/Logs; fi
if [[ ! -d "./Arquivos" ]]; then mkdir -p ./Arquivos; fi
if [[ ! -d "./Arquivos/Secreto" ]]; then mkdir -p ./Arquivos/Secreto; fi
Arquitetura=$([ "$(uname -m)" == "x86_64" ] && echo "AMD64" || echo "ARM64") # Pega a Arquitetura da maquina
StartUP_CMD=${StartARM} [ "${Arquitetura}" == "ARM64" ] || StartUP_CMD=${StartAMD} # isto √© o que de fato vai executar como StartUP_CMD
version=$(grep "üü¢Vers√£o Atual: " "$version_file" | cut -d' ' -f3) # Lendo a vers√£o local
if [ "${version}" == "PR√â" ]; then version2="${version}"; else version2="${version} "; fi #organiza o tamanho da vers√£o
if [ "${SUPORTE_ATIVO}" == "1" ]; then Suporte_egg="‚úÖ ${C1}Definido  ${C0}"; else Suporte_egg="‚ùå ${C3}Indefinido${C0}"; fi # Verifica√ß√£o do Suporte
if [ "${AUTO_UPDATE}" == "1" ]; then Updater_egg="‚úÖ ${C1}Definido  ${C0}"; else Updater_egg="‚ùå ${C3}Indefinido${C0}"; fi # Verifica√ß√£o do Atualiza√ß√£o.
if [ "${StartType}" == "0" ]; then Type_egg="‚úÖ ${C1}Direto    ${C0}"; else Type_egg="‚úÖ ${C1}NoHub     ${C0}"; fi # Verifica√ß√£o do TypeStart
if [ "${Script_Type}" == "1" ]; then Scriptstat="${C1}Alpha${C0}"; else Scriptstat="${C1}Beta ${C0}"; fi # Beta sim e n√£o
if [ -z "${SUPORTE_ATIVO}" ]; then Suporte="‚ùå ${C3}Desativado${C0}"; else Suporte="‚úÖ ${C1}Ativado   ${C0}"; fi # Verifica√ß√£o do Suporte egg
if [ -z "${AUTO_UPDATE}" ]; then Updater="‚ùå ${C3}Desativado${C0}"; else  Updater="‚úÖ ${C1}Ativado   ${C0}"; fi # Verifica√ß√£o do Atualiza√ß√£o egg
# Carregar Vers√µes
version_latest=$(curl -s "$version_remote" | grep "üü¢Vers√£o Latest: " | cut -d' ' -f3) # Lendo a vers√£o remota
if [ "$version" != "$version_latest" ]; then version_update="> ${C2}${version_latest}${C0}"; else version_update="    "; fi # Verificando se h√° uma nova vers√£o dispon√≠vel.
# Inicio Do Script
if [ -z ${SUPORTE_ATIVO} ] || [ "${SUPORTE_ATIVO}" == "1" ]; then
    echo "
    .+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-*.
    |                                          |                  ${C5}INICIANDO SCRIPT${C0}                   |
    |                   ${C5}:%*${C0}                    |+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+-|
    |                  ${C4}:%@@*${C0}                   |                          |                          |
    |                 ${C5}-@@@@@#${C0}                  | ${C0}Egg:${C1} ${Egg}${C0}| Arquitetura:${C1} ${Arquitetura} ${C0}      |
    |                ${C4}=@@@@@@@%.${C0}                | Vers√£o: ${C1}${version2}${C0} ${version_update}        | Script: ${C1}${Scriptstat}${C0}            |
    |               ${C5}+@@@@#%@@@%:${C0}               | StartType: ${Type_egg} |                          |
    |              ${C4}+@@@@= .#@@@%:${C0}              |                          |                          |
    |             ${C5}*@@@@-    #@@@@-${C0}             |+*-+*-+*-+*-+*-+*-+*-+*-+*|+*-+*-+*-+*-+*-+*-+*-+*-+*|
    |            ${C4}#@@@@:      *@@@@=${C0}            |     ${C5}VARIANTES DO EGG${C0}     |   ${C5}ATIVADOS/DESATIVADOS${C0}   |
    |          ${C5}.%@@@%:        +@@@@+${C0}           |+*-+*-+*-+*-+*-+*-+*-+*-+*|+*-+*-+*-+*-+*-+*-+*-+*-+*|
    |         ${C4}:%@@@%.          =@@@@*${C0}          |                          |                          |
    |        ${C5}:%@@@#   ++++++++++@@@@@*${C0}         | Suporte: ${Suporte_egg}   | Suporte: ${Suporte}   |
    |       ${C4}=@@@@#  .%@@@@@@@@@@@@@@@@%.${C0}       |                          |                          |
    |      ${C5}-%%%%#. .+%##########%%%%%#%*.${C0}      | Update: ${Updater_egg}    | Update: ${Updater}    |
    |    ${C4} -------  ------------------------${C0}    |                          |                          |
    |                                          |                          |                          |
    *-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*¬∞-+*-+*-+*+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+.*
    "  
    if [ -z "$AUTO_UPDATE" ] || [ -z "$SUPORTE_ATIVO" ]; then
    echo "
    ${C3}.-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*+-+*-+*-+*+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+-.
    ${C3}|   UMA OU MAIS VARIANTES DO EGG EST√ÉO EM FALTA, BAIXE A VERS√ÉO MAIS RECENTE DO EGG NO GITHUB.   |
    ${C3}|                                 https://github.com/drylian/Eggs                                |
    ${C3}*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*+-+*-+*-+*+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+*-+.* 
    ${C0}"
    fi
        # Atualiza√ß√µes
    if [ "${AUTO_UPDATE}" == "1" ]; then
        echo " üîµ A ${C1}Atualiza√ß√µes Automatica${C0} est√° ${C2}Ativada${C0}, Buscando Atualiza√ß√µes..."
        if [ "$version" == "PR√â" ]; then
            echo " üîµ   ${C1}Vers√£o Inicial${C0} detectada, Iniciando Downloads"
            sed -i '/üü¢Vers√£o Atual:*/d' ./${Pasta_Base}/${Base_txt}
            echo  "üü¢Vers√£o Atual: ${version_latest}" >> "./${Pasta_Base}/${Base_txt}"
        elif [ "$version" != "$version_latest" ]; then
            echo " üîµ   Nova ${C1}Vers√£o${C0} detectada, Iniciando Atualiza√ß√£o."
            # Oque vai Fazer se tiver atualiza√ß√£o
            
            # Seta a vers√£o mais atual
            sed -i '/üü¢Vers√£o Atual:*/d' ./${Pasta_Base}/${Base_txt}
            echo  "üü¢Vers√£o Atual: ${version_latest}" >> "./${Pasta_Base}/${Base_txt}"
            echo ""
            echo " üîµ   Sistema foi ${C1}Atualizado${C0} vers√£o atual ${version}..."
        elif [ "$version" == "$version_latest" ]; then
            echo " üîµ   Sistema est√° ${C1}Atualizado${C0} vers√£o atual ${version}..."
        fi
    else
        echo " üü°   A ${C1}Atualiza√ß√µes Automatica${C0} est√° ${C3}Desativada${C0}, Pulando etapa..."
    fi
    echo " üîµ   Iniciando Script de ${C1}Verifica√ß√£o e Instala√ß√£o${C0} das dependecias..."
    # Aqui ficar√° o Script
    # NGINX Verificador
    if grep -q "üü¢NGINX instalado" "./üìÇInforma√ß√µes/üü¢Informa√ß√µes.txt"; then
        echo " üîµ   O ${C1}Nginx${C0} foi detectado como Instalado, Verificando Pasta..."
        if [[ -f "./announce" ]]; then
            echo " üîµ   A Pasta ${C1}Nginx${C0} foi verificado, Continuando inicia√ß√£o..."
        else
            echo " üü°   A Pasta ${C1}Nginx${C0} ${C3}n√£o${C0} foi encontrada, Baixando..."
            curl -s -L -o /home/container/announce "https://github.com/drylian/Eggs/releases/latest/download/announce"
            echo " üîµ   A Pasta ${C1}Nginx${C0} foi ${C2}baixada${C0}, Continuando inicia√ß√£o..."
        fi
    else
        echo " üîµ   O ${C1}Nginx${C0} ${C3}n√£o${C0} foi detectado como Instalado, Verificando Pasta..."
        if [[ -f "./announce" ]]; then
            echo " üü°   A Pasta ${C1}Nginx${C0} foi encontrada, por√©m n√£o est√° nas normas do script, Deletando..."
            rm -f ./announce
            echo " üü¢   Baixando a Pasta ${C1}NGINX${C0} verificado..."
            curl -s -L -o /home/container/announce "https://github.com/drylian/Eggs/releases/latest/download/announce"
            echo " üîµ   A Pasta ${C1}Nginx${C0} foi ${C2}baixado${C0}, Continuando inicia√ß√£o..."
            echo "üü¢NGINX instalado" >> "./üìÇInforma√ß√µes/üü¢Informa√ß√µes.txt"
        else
            echo " üü°   A Pasta ${C1}Nginx${C0} ${C3}n√£o${C0} foi encontrada, Baixando..."
            curl -s -L -o /home/container/announce "https://github.com/drylian/Eggs/releases/latest/download/announce"
            echo " üîµ   A Pasta ${C1}Nginx${C0} foi ${C2}baixado${C0}, Continuando inicia√ß√£o..."
            echo "üü¢NGINX instalado" >> "./üìÇInforma√ß√µes/üü¢Informa√ß√µes.txt"
        fi
    fi























    echo ""
    echo " üîµ   Setando ${C1}Permiss√µes${C0} padr√µes."
    eval "$Permissoes_padroes"
    # Fim do Script
    echo " üîµ   ${C1}Verifica√ß√£o e Instala√ß√£o${C0} dependecias foi terminado, Iniciando Inicializador..."
    # O StartType do comando n√£o necessita mudar
    if [ "${StartType}" == "1" ]; then
        nohup ${StartUP_CMD} > ${Egg}.log.txt 2> ${Egg}.erro.log.txt &
        pid=$!
        # Continua a exibir as √∫ltimas linhas do Pasta de log a cada segundo
        while true; do
            tail -n 10 -F ${Egg}.log.txt
            tail -n 10 -F ${Egg}.erro.log.txt
            sleep 1
            # Verifica se o processo do aplicativo ainda est√° ativo
            if ! kill -0 $pid 2> /dev/null; then
                # Salva as logs na pasta "./${Pasta_Base}/Logs/"./Informacoes/Informacoes.txt
                echo "üî¥   ${C3}O ${Egg} foi finalizado sem aviso, provavelmente erro interno, desligando script${C0}..."
                if [ ! -f "./${Pasta_Base}/Logs/${Egg}.log.txt" ]; then
                  	echo " " > "./${Pasta_Base}/Logs/${Egg}log.txt"
                fi
                
                if [ ! -f "./${Pasta_Base}/Logs/${Egg}.log.txt" ]; then
                  	echo " " > "./${Pasta_Base}/Logs/${Egg}.log.txt"
                fi

                cat ${Egg}.log.txt >> ./${Pasta_Base}/Logs/${Egg}.log.txt
                cat ${Egg}.erro.log.txt >> ./${Pasta_Base}/Logs/${Egg}.erro.log.txt

                rm ${Egg}.log.txt
                rm ${Egg}.erro.log.txt
                break
            fi
        done &
        tail_pid=$!
    else
        eval ${StartUP_CMD}
    fi
    # Aguarda input do usu√°rio
        while read line; do
            if [ "$line" = "${Stop_CMD}" ]; then
                kill $pid
                echo "üü¢   ${C1}Comando de Desligamento${C0} Executado, Salvando Pastas..."
                if [ ! -f "./${Pasta_Base}/Logs/${Egg}.log.txt" ]; then
                  	echo " " > "./${Pasta_Base}/Logs/${Egg}log.txt"
                fi

                if [ ! -f "./${Pasta_Base}/Logs/${Egg}.log.txt" ]; then
                  	echo " " > "./${Pasta_Base}/Logs/${Egg}.log.txt"
                fi

                cat ${Egg}.log.txt >> ./${Pasta_Base}/Logs/${Egg}.log.txt
                cat ${Egg}.erro.log.txt >> ./${Pasta_Base}/Logs/${Egg}.erro.log.txt

                rm ${Egg}.log.txt
                rm ${Egg}.erro.log.txt
                sleep 5
                break
            if [ "$line" = "criar usuario" ]; then
              echo "1- Digite o nome do usu√°rio:"
              read username
              echo "2- Digite a senha do usu√°rio:"
              read password
              echo "3- Digite em barras a pasta onde o usu√°rio ser√° usado (exemplo = /Arquivos/UmPastaSecreta):"
              read folder

              # criando o Pasta .htpasswd
              echo "${username}:$(openssl passwd -apr1 $password)" > "$folder/.htpasswd"
              echo "${bold}${lightgreen}== üü¢ Usu√°rio criado com sucesso!"

              # configurando o Nginx
              conf_file="/etc/nginx/conf.d/$folder.conf"
              echo "location $folder {" > "$conf_file"
              echo "  auth_basic \"Restricted Content\";" >> "$conf_file"
              echo "  auth_basic_user_file $folder/.htpasswd;" >> "$conf_file"
              echo "}" >> "$conf_file"
              echo "${bold}${lightgreen}== üü¢ Configura√ß√£o do Nginx atualizada com sucesso!"

              elif [ "$line" = "deletar usuario" ]; then
                  echo "Digite o nome do usu√°rio que voc√™ deseja excluir:"
                  read username
                  echo "Digite a pasta em que o usu√°rio foi criado:"
                  read folder
                  # verificando se o Pasta .htpasswd existe
                  htpasswd_file="$folder/.htpasswd"
                  if [ -f "$htpasswd_file" ]; then
                      # removendo a linha correspondente ao usu√°rio do Pasta .htpasswd
                      sed -i "/^${username}:/d" "$htpasswd_file"
                      echo "${bold}${lightgreen}== üü¢ Usu√°rio exclu√≠do com sucesso!"
                  else
                      echo "${bold}${lightgreen}== üü¢ O Pasta .htpasswd para esta pasta n√£o existe ou est√° vazio!"
                  fi
            else
                echo "üî¥   Script ${C3}Falhou${C0} ou For√ßado pelo ${C3}Kill${C0}."
            fi
        done
    kill $tail_pid
fi # If final